---
// Flexible button component
// Can be a link or button, with optional confetti effect
interface Props {
	href?: string;
	variant?: 'primary' | 'secondary' | 'outline';
	confetti?: boolean;
	title?: string;
	class?: string;
}

const { 
	href, 
	variant = 'primary', 
	confetti: enableConfetti = false,
	title,
	class: className = ''
} = Astro.props;

const variants = {
	primary: 'bg-purple-500 text-white hover:bg-purple-700 focus:ring-purple-400',
	secondary: 'bg-gray-500 text-white hover:bg-gray-700 focus:ring-gray-400',
	outline: 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-200 dark:border-gray-600 dark:hover:bg-gray-700'
};

const baseClasses = 'inline-flex items-center gap-2 py-2 px-4 font-semibold rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-opacity-75 transition-colors';
const variantClasses = variants[variant];
const classes = `${baseClasses} ${variantClasses} ${className}`;

const Tag = href ? 'a' : 'button';
---

<Tag
	href={href}
	class={classes}
	title={title}
	data-confetti={enableConfetti}
>
	<slot name="icon" />
	<slot />
</Tag>

{enableConfetti && (
	<script>
		import confetti from 'canvas-confetti';
		const buttons = document.querySelectorAll('[data-confetti="true"]');

		buttons.forEach(button => {
			button.addEventListener('click', () => confetti());
		});
	</script>
)}
